// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: system.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_system_2eproto__INCLUDED
#define GRPC_system_2eproto__INCLUDED

#include "system.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace surrogate {
namespace grpc {

// The greeting service definition.
class SystemService final {
 public:
  static constexpr char const* service_full_name() {
    return "surrogate.grpc.SystemService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status SystemEmergencyStop(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::surrogate::grpc::SystemStateReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::surrogate::grpc::SystemStateReply>> AsyncSystemEmergencyStop(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::surrogate::grpc::SystemStateReply>>(AsyncSystemEmergencyStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::surrogate::grpc::SystemStateReply>> PrepareAsyncSystemEmergencyStop(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::surrogate::grpc::SystemStateReply>>(PrepareAsyncSystemEmergencyStopRaw(context, request, cq));
    }
    virtual ::grpc::Status SystemReset(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::surrogate::grpc::SystemStateReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::surrogate::grpc::SystemStateReply>> AsyncSystemReset(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::surrogate::grpc::SystemStateReply>>(AsyncSystemResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::surrogate::grpc::SystemStateReply>> PrepareAsyncSystemReset(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::surrogate::grpc::SystemStateReply>>(PrepareAsyncSystemResetRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Sends a greeting
      virtual void SystemEmergencyStop(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest* request, ::surrogate::grpc::SystemStateReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SystemEmergencyStop(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest* request, ::surrogate::grpc::SystemStateReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SystemReset(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest* request, ::surrogate::grpc::SystemStateReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SystemReset(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest* request, ::surrogate::grpc::SystemStateReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::surrogate::grpc::SystemStateReply>* AsyncSystemEmergencyStopRaw(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::surrogate::grpc::SystemStateReply>* PrepareAsyncSystemEmergencyStopRaw(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::surrogate::grpc::SystemStateReply>* AsyncSystemResetRaw(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::surrogate::grpc::SystemStateReply>* PrepareAsyncSystemResetRaw(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SystemEmergencyStop(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::surrogate::grpc::SystemStateReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::surrogate::grpc::SystemStateReply>> AsyncSystemEmergencyStop(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::surrogate::grpc::SystemStateReply>>(AsyncSystemEmergencyStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::surrogate::grpc::SystemStateReply>> PrepareAsyncSystemEmergencyStop(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::surrogate::grpc::SystemStateReply>>(PrepareAsyncSystemEmergencyStopRaw(context, request, cq));
    }
    ::grpc::Status SystemReset(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::surrogate::grpc::SystemStateReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::surrogate::grpc::SystemStateReply>> AsyncSystemReset(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::surrogate::grpc::SystemStateReply>>(AsyncSystemResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::surrogate::grpc::SystemStateReply>> PrepareAsyncSystemReset(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::surrogate::grpc::SystemStateReply>>(PrepareAsyncSystemResetRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SystemEmergencyStop(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest* request, ::surrogate::grpc::SystemStateReply* response, std::function<void(::grpc::Status)>) override;
      void SystemEmergencyStop(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest* request, ::surrogate::grpc::SystemStateReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SystemReset(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest* request, ::surrogate::grpc::SystemStateReply* response, std::function<void(::grpc::Status)>) override;
      void SystemReset(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest* request, ::surrogate::grpc::SystemStateReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::surrogate::grpc::SystemStateReply>* AsyncSystemEmergencyStopRaw(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::surrogate::grpc::SystemStateReply>* PrepareAsyncSystemEmergencyStopRaw(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::surrogate::grpc::SystemStateReply>* AsyncSystemResetRaw(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::surrogate::grpc::SystemStateReply>* PrepareAsyncSystemResetRaw(::grpc::ClientContext* context, const ::surrogate::grpc::ChangeSystemStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SystemEmergencyStop_;
    const ::grpc::internal::RpcMethod rpcmethod_SystemReset_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status SystemEmergencyStop(::grpc::ServerContext* context, const ::surrogate::grpc::ChangeSystemStateRequest* request, ::surrogate::grpc::SystemStateReply* response);
    virtual ::grpc::Status SystemReset(::grpc::ServerContext* context, const ::surrogate::grpc::ChangeSystemStateRequest* request, ::surrogate::grpc::SystemStateReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SystemEmergencyStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SystemEmergencyStop() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SystemEmergencyStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemEmergencyStop(::grpc::ServerContext* /*context*/, const ::surrogate::grpc::ChangeSystemStateRequest* /*request*/, ::surrogate::grpc::SystemStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSystemEmergencyStop(::grpc::ServerContext* context, ::surrogate::grpc::ChangeSystemStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::surrogate::grpc::SystemStateReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SystemReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SystemReset() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SystemReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemReset(::grpc::ServerContext* /*context*/, const ::surrogate::grpc::ChangeSystemStateRequest* /*request*/, ::surrogate::grpc::SystemStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSystemReset(::grpc::ServerContext* context, ::surrogate::grpc::ChangeSystemStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::surrogate::grpc::SystemStateReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SystemEmergencyStop<WithAsyncMethod_SystemReset<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SystemEmergencyStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SystemEmergencyStop() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::surrogate::grpc::ChangeSystemStateRequest, ::surrogate::grpc::SystemStateReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::surrogate::grpc::ChangeSystemStateRequest* request, ::surrogate::grpc::SystemStateReply* response) { return this->SystemEmergencyStop(context, request, response); }));}
    void SetMessageAllocatorFor_SystemEmergencyStop(
        ::grpc::MessageAllocator< ::surrogate::grpc::ChangeSystemStateRequest, ::surrogate::grpc::SystemStateReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::surrogate::grpc::ChangeSystemStateRequest, ::surrogate::grpc::SystemStateReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SystemEmergencyStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemEmergencyStop(::grpc::ServerContext* /*context*/, const ::surrogate::grpc::ChangeSystemStateRequest* /*request*/, ::surrogate::grpc::SystemStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SystemEmergencyStop(
      ::grpc::CallbackServerContext* /*context*/, const ::surrogate::grpc::ChangeSystemStateRequest* /*request*/, ::surrogate::grpc::SystemStateReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SystemReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SystemReset() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::surrogate::grpc::ChangeSystemStateRequest, ::surrogate::grpc::SystemStateReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::surrogate::grpc::ChangeSystemStateRequest* request, ::surrogate::grpc::SystemStateReply* response) { return this->SystemReset(context, request, response); }));}
    void SetMessageAllocatorFor_SystemReset(
        ::grpc::MessageAllocator< ::surrogate::grpc::ChangeSystemStateRequest, ::surrogate::grpc::SystemStateReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::surrogate::grpc::ChangeSystemStateRequest, ::surrogate::grpc::SystemStateReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SystemReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemReset(::grpc::ServerContext* /*context*/, const ::surrogate::grpc::ChangeSystemStateRequest* /*request*/, ::surrogate::grpc::SystemStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SystemReset(
      ::grpc::CallbackServerContext* /*context*/, const ::surrogate::grpc::ChangeSystemStateRequest* /*request*/, ::surrogate::grpc::SystemStateReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SystemEmergencyStop<WithCallbackMethod_SystemReset<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SystemEmergencyStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SystemEmergencyStop() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SystemEmergencyStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemEmergencyStop(::grpc::ServerContext* /*context*/, const ::surrogate::grpc::ChangeSystemStateRequest* /*request*/, ::surrogate::grpc::SystemStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SystemReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SystemReset() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SystemReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemReset(::grpc::ServerContext* /*context*/, const ::surrogate::grpc::ChangeSystemStateRequest* /*request*/, ::surrogate::grpc::SystemStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SystemEmergencyStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SystemEmergencyStop() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SystemEmergencyStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemEmergencyStop(::grpc::ServerContext* /*context*/, const ::surrogate::grpc::ChangeSystemStateRequest* /*request*/, ::surrogate::grpc::SystemStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSystemEmergencyStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SystemReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SystemReset() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SystemReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemReset(::grpc::ServerContext* /*context*/, const ::surrogate::grpc::ChangeSystemStateRequest* /*request*/, ::surrogate::grpc::SystemStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSystemReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SystemEmergencyStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SystemEmergencyStop() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SystemEmergencyStop(context, request, response); }));
    }
    ~WithRawCallbackMethod_SystemEmergencyStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemEmergencyStop(::grpc::ServerContext* /*context*/, const ::surrogate::grpc::ChangeSystemStateRequest* /*request*/, ::surrogate::grpc::SystemStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SystemEmergencyStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SystemReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SystemReset() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SystemReset(context, request, response); }));
    }
    ~WithRawCallbackMethod_SystemReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SystemReset(::grpc::ServerContext* /*context*/, const ::surrogate::grpc::ChangeSystemStateRequest* /*request*/, ::surrogate::grpc::SystemStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SystemReset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SystemEmergencyStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SystemEmergencyStop() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::surrogate::grpc::ChangeSystemStateRequest, ::surrogate::grpc::SystemStateReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::surrogate::grpc::ChangeSystemStateRequest, ::surrogate::grpc::SystemStateReply>* streamer) {
                       return this->StreamedSystemEmergencyStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SystemEmergencyStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SystemEmergencyStop(::grpc::ServerContext* /*context*/, const ::surrogate::grpc::ChangeSystemStateRequest* /*request*/, ::surrogate::grpc::SystemStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSystemEmergencyStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::surrogate::grpc::ChangeSystemStateRequest,::surrogate::grpc::SystemStateReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SystemReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SystemReset() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::surrogate::grpc::ChangeSystemStateRequest, ::surrogate::grpc::SystemStateReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::surrogate::grpc::ChangeSystemStateRequest, ::surrogate::grpc::SystemStateReply>* streamer) {
                       return this->StreamedSystemReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SystemReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SystemReset(::grpc::ServerContext* /*context*/, const ::surrogate::grpc::ChangeSystemStateRequest* /*request*/, ::surrogate::grpc::SystemStateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSystemReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::surrogate::grpc::ChangeSystemStateRequest,::surrogate::grpc::SystemStateReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SystemEmergencyStop<WithStreamedUnaryMethod_SystemReset<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SystemEmergencyStop<WithStreamedUnaryMethod_SystemReset<Service > > StreamedService;
};

}  // namespace grpc
}  // namespace surrogate


#endif  // GRPC_system_2eproto__INCLUDED
