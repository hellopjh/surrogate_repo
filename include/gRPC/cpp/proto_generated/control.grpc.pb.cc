// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: control.proto

#include "control.pb.h"
#include "control.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace surrogate {
namespace grpc {

static const char* ControlService_method_names[] = {
  "/surrogate.grpc.ControlService/MoveJ",
  "/surrogate.grpc.ControlService/SetMobileState",
};

std::unique_ptr< ControlService::Stub> ControlService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ControlService::Stub> stub(new ControlService::Stub(channel, options));
  return stub;
}

ControlService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_MoveJ_(ControlService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMobileState_(ControlService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ControlService::Stub::MoveJ(::grpc::ClientContext* context, const ::surrogate::grpc::MoveJRequest& request, ::surrogate::grpc::ControlDefaultReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::surrogate::grpc::MoveJRequest, ::surrogate::grpc::ControlDefaultReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveJ_, context, request, response);
}

void ControlService::Stub::async::MoveJ(::grpc::ClientContext* context, const ::surrogate::grpc::MoveJRequest* request, ::surrogate::grpc::ControlDefaultReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::surrogate::grpc::MoveJRequest, ::surrogate::grpc::ControlDefaultReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveJ_, context, request, response, std::move(f));
}

void ControlService::Stub::async::MoveJ(::grpc::ClientContext* context, const ::surrogate::grpc::MoveJRequest* request, ::surrogate::grpc::ControlDefaultReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveJ_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::surrogate::grpc::ControlDefaultReply>* ControlService::Stub::PrepareAsyncMoveJRaw(::grpc::ClientContext* context, const ::surrogate::grpc::MoveJRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::surrogate::grpc::ControlDefaultReply, ::surrogate::grpc::MoveJRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveJ_, context, request);
}

::grpc::ClientAsyncResponseReader< ::surrogate::grpc::ControlDefaultReply>* ControlService::Stub::AsyncMoveJRaw(::grpc::ClientContext* context, const ::surrogate::grpc::MoveJRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveJRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ControlService::Stub::SetMobileState(::grpc::ClientContext* context, const ::surrogate::grpc::SetMobileStateRequest& request, ::surrogate::grpc::MobileMotionData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::surrogate::grpc::SetMobileStateRequest, ::surrogate::grpc::MobileMotionData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMobileState_, context, request, response);
}

void ControlService::Stub::async::SetMobileState(::grpc::ClientContext* context, const ::surrogate::grpc::SetMobileStateRequest* request, ::surrogate::grpc::MobileMotionData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::surrogate::grpc::SetMobileStateRequest, ::surrogate::grpc::MobileMotionData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMobileState_, context, request, response, std::move(f));
}

void ControlService::Stub::async::SetMobileState(::grpc::ClientContext* context, const ::surrogate::grpc::SetMobileStateRequest* request, ::surrogate::grpc::MobileMotionData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMobileState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::surrogate::grpc::MobileMotionData>* ControlService::Stub::PrepareAsyncSetMobileStateRaw(::grpc::ClientContext* context, const ::surrogate::grpc::SetMobileStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::surrogate::grpc::MobileMotionData, ::surrogate::grpc::SetMobileStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMobileState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::surrogate::grpc::MobileMotionData>* ControlService::Stub::AsyncSetMobileStateRaw(::grpc::ClientContext* context, const ::surrogate::grpc::SetMobileStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMobileStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

ControlService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ControlService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ControlService::Service, ::surrogate::grpc::MoveJRequest, ::surrogate::grpc::ControlDefaultReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::surrogate::grpc::MoveJRequest* req,
             ::surrogate::grpc::ControlDefaultReply* resp) {
               return service->MoveJ(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ControlService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ControlService::Service, ::surrogate::grpc::SetMobileStateRequest, ::surrogate::grpc::MobileMotionData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::surrogate::grpc::SetMobileStateRequest* req,
             ::surrogate::grpc::MobileMotionData* resp) {
               return service->SetMobileState(ctx, req, resp);
             }, this)));
}

ControlService::Service::~Service() {
}

::grpc::Status ControlService::Service::MoveJ(::grpc::ServerContext* context, const ::surrogate::grpc::MoveJRequest* request, ::surrogate::grpc::ControlDefaultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ControlService::Service::SetMobileState(::grpc::ServerContext* context, const ::surrogate::grpc::SetMobileStateRequest* request, ::surrogate::grpc::MobileMotionData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace surrogate
}  // namespace grpc

